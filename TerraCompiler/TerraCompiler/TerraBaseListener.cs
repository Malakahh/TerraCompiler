//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Terra.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ITerraListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TerraBaseListener : ITerraListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStart([NotNull] TerraParser.StartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStart([NotNull] TerraParser.StartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] TerraParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] TerraParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.include"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInclude([NotNull] TerraParser.IncludeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.include"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInclude([NotNull] TerraParser.IncludeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.path"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPath([NotNull] TerraParser.PathContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.path"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPath([NotNull] TerraParser.PathContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.pathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPathExpression([NotNull] TerraParser.PathExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.pathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPathExpression([NotNull] TerraParser.PathExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.fileName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFileName([NotNull] TerraParser.FileNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.fileName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFileName([NotNull] TerraParser.FileNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefinition([NotNull] TerraParser.DefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.definition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefinition([NotNull] TerraParser.DefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.window"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWindow([NotNull] TerraParser.WindowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.window"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWindow([NotNull] TerraParser.WindowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] TerraParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] TerraParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] TerraParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] TerraParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] TerraParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] TerraParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] TerraParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] TerraParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.collection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCollection([NotNull] TerraParser.CollectionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.collection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCollection([NotNull] TerraParser.CollectionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TerraParser.point"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPoint([NotNull] TerraParser.PointContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TerraParser.point"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPoint([NotNull] TerraParser.PointContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
