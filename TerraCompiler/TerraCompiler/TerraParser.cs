//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Terra.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TerraParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T_Digit=45, 
		T_CapitalLetter=46, T_Letter=47, T_BlockStart=48, T_BlockEnd=49, T_StringBeginEnd=50, 
		T_Period=51, T_PathSeparator=52, T_CollectionStart=53, T_CollectionEnd=54, 
		WS=55;
	public const int
		RULE_start = 0, RULE_identifier = 1, RULE_frameIdentifier = 2, RULE_identifierChain = 3, 
		RULE_identifierChainExpr = 4, RULE_include = 5, RULE_fileName = 6, RULE_definition = 7, 
		RULE_window = 8, RULE_block = 9, RULE_statement = 10, RULE_assignment = 11, 
		RULE_collection = 12, RULE_path = 13, RULE_pathExpression = 14, RULE_string = 15, 
		RULE_integer = 16, RULE_float = 17, RULE_boolean = 18, RULE_point = 19;
	public static readonly string[] ruleNames = {
		"start", "identifier", "frameIdentifier", "identifierChain", "identifierChainExpr", 
		"include", "fileName", "definition", "window", "block", "statement", "assignment", 
		"collection", "path", "pathExpression", "string", "integer", "float", 
		"boolean", "point"
	};

	private static readonly string[] _LiteralNames = {
		null, "'_'", "'include'", "'define'", "'as'", "'Window'", "':'", "'-'", 
		"'true'", "'false'", "'True'", "'False'", "'TRUE'", "'FALSE'", "'top'", 
		"'TOP'", "'Top'", "'topleft'", "'TOPLEFT'", "'Topleft'", "'TopLeft'", 
		"'topright'", "'TOPRIGHT'", "'Topright'", "'TopRight'", "'bottom'", "'BOTTOM'", 
		"'Bottom'", "'bottomleft'", "'BOTTOMLEFT'", "'Bottomleft'", "'BottomLeft'", 
		"'bottomright'", "'BOTTOMRIGHT'", "'Bottomright'", "'BottomRight'", "'left'", 
		"'LEFT'", "'Left'", "'right'", "'RIGHT'", "'Right'", "'center'", "'CENTER'", 
		"'Center'", null, null, null, "'{'", "'}'", "'\"'", "'.'", "'/'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "T_Digit", "T_CapitalLetter", 
		"T_Letter", "T_BlockStart", "T_BlockEnd", "T_StringBeginEnd", "T_Period", 
		"T_PathSeparator", "T_CollectionStart", "T_CollectionEnd", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Terra.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TerraParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TerraParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TerraParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public WindowContext window() {
			return GetRuleContext<WindowContext>(0);
		}
		public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 40; include();
					}
					} 
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 46; definition();
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 52; window();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode[] T_Letter() { return GetTokens(TerraParser.T_Letter); }
		public ITerminalNode T_Letter(int i) {
			return GetToken(TerraParser.T_Letter, i);
		}
		public ITerminalNode[] T_CapitalLetter() { return GetTokens(TerraParser.T_CapitalLetter); }
		public ITerminalNode T_CapitalLetter(int i) {
			return GetToken(TerraParser.T_CapitalLetter, i);
		}
		public ITerminalNode[] T_Digit() { return GetTokens(TerraParser.T_Digit); }
		public ITerminalNode T_Digit(int i) {
			return GetToken(TerraParser.T_Digit, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_identifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T_Letter) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 55;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T_Digit) | (1L << T_CapitalLetter) | (1L << T_Letter))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameIdentifierContext : ParserRuleContext {
		public ITerminalNode[] T_CapitalLetter() { return GetTokens(TerraParser.T_CapitalLetter); }
		public ITerminalNode T_CapitalLetter(int i) {
			return GetToken(TerraParser.T_CapitalLetter, i);
		}
		public ITerminalNode[] T_Letter() { return GetTokens(TerraParser.T_Letter); }
		public ITerminalNode T_Letter(int i) {
			return GetToken(TerraParser.T_Letter, i);
		}
		public ITerminalNode[] T_Digit() { return GetTokens(TerraParser.T_Digit); }
		public ITerminalNode T_Digit(int i) {
			return GetToken(TerraParser.T_Digit, i);
		}
		public FrameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterFrameIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitFrameIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public FrameIdentifierContext frameIdentifier() {
		FrameIdentifierContext _localctx = new FrameIdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_frameIdentifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(T_CapitalLetter);
			State = 65;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 62;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T_Digit) | (1L << T_CapitalLetter) | (1L << T_Letter))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierChainContext : ParserRuleContext {
		public IdentifierChainExprContext identifierChainExpr() {
			return GetRuleContext<IdentifierChainExprContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterIdentifierChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitIdentifierChain(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierChainContext identifierChain() {
		IdentifierChainContext _localctx = new IdentifierChainContext(Context, State);
		EnterRule(_localctx, 6, RULE_identifierChain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; identifierChainExpr(0);
			State = 69; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierChainExprContext : ParserRuleContext {
		public IdentifierChainExprContext identifierChainExpr() {
			return GetRuleContext<IdentifierChainExprContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierChainExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierChainExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterIdentifierChainExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitIdentifierChainExpr(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierChainExprContext identifierChainExpr() {
		return identifierChainExpr(0);
	}

	private IdentifierChainExprContext identifierChainExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentifierChainExprContext _localctx = new IdentifierChainExprContext(Context, _parentState);
		IdentifierChainExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_identifierChainExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierChainExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_identifierChainExpr);
					State = 72;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 73; identifier();
					State = 74; Match(T_Period);
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 10, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__1);
			State = 82; path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode T_Period() { return GetToken(TerraParser.T_Period, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterFileName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitFileName(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_fileName);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; identifier();
				State = 85; Match(T_Period);
				State = 86; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_definition);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; Match(T__2);
				State = 92; identifier();
				State = 93; Match(T__3);
				State = 94; identifier();
				State = 95; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; Match(T__2);
				State = 98; identifier();
				State = 99; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WindowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterWindow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitWindow(this);
		}
	}

	[RuleVersion(0)]
	public WindowContext window() {
		WindowContext _localctx = new WindowContext(Context, State);
		EnterRule(_localctx, 16, RULE_window);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__4);
			State = 104; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode T_BlockStart() { return GetToken(TerraParser.T_BlockStart, 0); }
		public ITerminalNode T_BlockEnd() { return GetToken(TerraParser.T_BlockEnd, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T_BlockStart);
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 107; statement();
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 113; Match(T_BlockEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; identifier();
				State = 116; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public FrameIdentifierContext frameIdentifier() {
			return GetRuleContext<FrameIdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public PointContext point() {
			return GetRuleContext<PointContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; identifier();
				State = 122; Match(T__5);
				State = 123; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; identifier();
				State = 126; Match(T__5);
				State = 127; identifierChain();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; identifier();
				State = 130; Match(T__5);
				State = 131; frameIdentifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133; identifier();
				State = 134; Match(T__5);
				State = 135; @string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 137; identifier();
				State = 138; Match(T__5);
				State = 139; integer();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 141; identifier();
				State = 142; Match(T__5);
				State = 143; @float();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 145; identifier();
				State = 146; Match(T__5);
				State = 147; boolean();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 149; identifier();
				State = 150; Match(T__5);
				State = 151; collection();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 153; identifier();
				State = 154; Match(T__5);
				State = 155; point();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public ITerminalNode T_CollectionStart() { return GetToken(TerraParser.T_CollectionStart, 0); }
		public ITerminalNode T_CollectionEnd() { return GetToken(TerraParser.T_CollectionEnd, 0); }
		public FrameIdentifierContext[] frameIdentifier() {
			return GetRuleContexts<FrameIdentifierContext>();
		}
		public FrameIdentifierContext frameIdentifier(int i) {
			return GetRuleContext<FrameIdentifierContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_collection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(T_CollectionStart);
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 160; frameIdentifier();
					State = 161; block();
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 168; Match(T_CollectionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public ITerminalNode[] T_StringBeginEnd() { return GetTokens(TerraParser.T_StringBeginEnd); }
		public ITerminalNode T_StringBeginEnd(int i) {
			return GetToken(TerraParser.T_StringBeginEnd, i);
		}
		public PathExpressionContext pathExpression() {
			return GetRuleContext<PathExpressionContext>(0);
		}
		public FileNameContext fileName() {
			return GetRuleContext<FileNameContext>(0);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 26, RULE_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T_StringBeginEnd);
			State = 171; pathExpression(0);
			State = 172; fileName();
			State = 173; Match(T_StringBeginEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathExpressionContext : ParserRuleContext {
		public PathExpressionContext pathExpression() {
			return GetRuleContext<PathExpressionContext>(0);
		}
		public ITerminalNode[] T_Period() { return GetTokens(TerraParser.T_Period); }
		public ITerminalNode T_Period(int i) {
			return GetToken(TerraParser.T_Period, i);
		}
		public ITerminalNode T_PathSeparator() { return GetToken(TerraParser.T_PathSeparator, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitPathExpression(this);
		}
	}

	[RuleVersion(0)]
	public PathExpressionContext pathExpression() {
		return pathExpression(0);
	}

	private PathExpressionContext pathExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PathExpressionContext _localctx = new PathExpressionContext(Context, _parentState);
		PathExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_pathExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 187;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new PathExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pathExpression);
						State = 176;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 177; Match(T_Period);
						State = 178; Match(T_Period);
						State = 179; Match(T_PathSeparator);
						}
						break;
					case 2:
						{
						_localctx = new PathExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pathExpression);
						State = 180;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 181; Match(T_Period);
						State = 182; Match(T_PathSeparator);
						}
						break;
					case 3:
						{
						_localctx = new PathExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pathExpression);
						State = 183;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 184; identifier();
						State = 185; Match(T_PathSeparator);
						}
						break;
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] T_StringBeginEnd() { return GetTokens(TerraParser.T_StringBeginEnd); }
		public ITerminalNode T_StringBeginEnd(int i) {
			return GetToken(TerraParser.T_StringBeginEnd, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 30, RULE_string);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(T_StringBeginEnd);
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 193;
					MatchWildcard();
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 199; Match(T_StringBeginEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode[] T_Digit() { return GetTokens(TerraParser.T_Digit); }
		public ITerminalNode T_Digit(int i) {
			return GetToken(TerraParser.T_Digit, i);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 32, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 201; Match(T__6);
				}
			}

			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 204; Match(T_Digit);
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T_Digit );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public ITerminalNode[] T_Digit() { return GetTokens(TerraParser.T_Digit); }
		public ITerminalNode T_Digit(int i) {
			return GetToken(TerraParser.T_Digit, i);
		}
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 34, RULE_float);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 209; Match(T__6);
				}
			}

			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T_Digit) {
				{
				{
				State = 212; Match(T_Digit);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218; Match(T_Period);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 219; Match(T_Digit);
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T_Digit );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 36, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointContext : ParserRuleContext {
		public PointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_point; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.EnterPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITerraListener typedListener = listener as ITerraListener;
			if (typedListener != null) typedListener.ExitPoint(this);
		}
	}

	[RuleVersion(0)]
	public PointContext point() {
		PointContext _localctx = new PointContext(Context, State);
		EnterRule(_localctx, 38, RULE_point);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return identifierChainExpr_sempred((IdentifierChainExprContext)_localctx, predIndex);
		case 14: return pathExpression_sempred((PathExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool identifierChainExpr_sempred(IdentifierChainExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool pathExpression_sempred(PathExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\xE7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\a', '\x2', ',', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '/', 
		'\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x35', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', ';', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '>', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x42', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'O', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'R', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\\', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', 'h', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\a', '\v', 'o', '\n', '\v', '\f', '\v', 
		'\xE', '\v', 'r', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'z', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA0', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xA6', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xA9', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xBE', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xC1', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\xC5', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC8', 
		'\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x5', '\x12', 
		'\xCD', '\n', '\x12', '\x3', '\x12', '\x6', '\x12', '\xD0', '\n', '\x12', 
		'\r', '\x12', '\xE', '\x12', '\xD1', '\x3', '\x13', '\x5', '\x13', '\xD5', 
		'\n', '\x13', '\x3', '\x13', '\a', '\x13', '\xD8', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xDB', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x6', '\x13', '\xDF', '\n', '\x13', '\r', '\x13', '\xE', '\x13', '\xE0', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '-', '\x33', 'p', '\xA7', '\xC6', '\x4', '\n', '\x1E', '\x16', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '\x2', '\x6', 
		'\x4', '\x2', '\x3', '\x3', '\x31', '\x31', '\x4', '\x2', '\x3', '\x3', 
		'/', '\x31', '\x3', '\x2', '\n', '\xF', '\x3', '\x2', '\x10', '.', '\x2', 
		'\xED', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x4', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'I', '\x3', '\x2', '\x2', '\x2', '\f', 
		'S', '\x3', '\x2', '\x2', '\x2', '\xE', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'g', '\x3', '\x2', '\x2', '\x2', '\x12', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'l', '\x3', '\x2', '\x2', '\x2', '\x16', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xB1', '\x3', '\x2', '\x2', '\x2', ' ', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xCC', '\x3', '\x2', '\x2', '\x2', '$', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xE2', '\x3', '\x2', '\x2', '\x2', '(', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '*', ',', '\x5', '\f', '\a', '\x2', '+', '*', 
		'\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', '-', 
		'.', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x33', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x32', '\x5', '\x10', '\t', '\x2', '\x31', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x5', '\x12', '\n', '\x2', '\x37', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x38', '<', '\t', '\x2', '\x2', '\x2', 
		'\x39', ';', '\t', '\x3', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '\x43', '\a', 
		'\x30', '\x2', '\x2', '@', '\x42', '\t', '\x3', '\x2', '\x2', '\x41', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\a', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x5', '\n', '\x6', '\x2', 
		'G', 'H', '\x5', '\x4', '\x3', '\x2', 'H', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'P', '\b', '\x6', '\x1', '\x2', 'J', 'K', '\f', '\x4', '\x2', 
		'\x2', 'K', 'L', '\x5', '\x4', '\x3', '\x2', 'L', 'M', '\a', '\x35', '\x2', 
		'\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x4', 
		'\x2', '\x2', 'T', 'U', '\x5', '\x1C', '\xF', '\x2', 'U', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x5', '\x4', '\x3', '\x2', 'W', 'X', '\a', 
		'\x35', '\x2', '\x2', 'X', 'Y', '\x5', '\x4', '\x3', '\x2', 'Y', '\\', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x5', '\x4', '\x3', '\x2', '[', 
		'V', '\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\xF', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x5', '\x2', 
		'\x2', '^', '_', '\x5', '\x4', '\x3', '\x2', '_', '`', '\a', '\x6', '\x2', 
		'\x2', '`', '\x61', '\x5', '\x4', '\x3', '\x2', '\x61', '\x62', '\x5', 
		'\x14', '\v', '\x2', '\x62', 'h', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x5', '\x2', '\x2', '\x64', '\x65', '\x5', '\x4', '\x3', 
		'\x2', '\x65', '\x66', '\x5', '\x14', '\v', '\x2', '\x66', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'g', ']', '\x3', '\x2', '\x2', '\x2', 'g', '\x63', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x11', '\x3', '\x2', '\x2', '\x2', 'i', 
		'j', '\a', '\a', '\x2', '\x2', 'j', 'k', '\x5', '\x14', '\v', '\x2', 'k', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 'l', 'p', '\a', '\x32', '\x2', '\x2', 
		'm', 'o', '\x5', '\x16', '\f', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 
		'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x33', '\x2', '\x2', 
		't', '\x15', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\x4', '\x3', 
		'\x2', 'v', 'w', '\x5', '\x14', '\v', '\x2', 'w', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'z', '\x5', '\x18', '\r', '\x2', 'y', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\x5', '\x4', '\x3', '\x2', '|', '}', '\a', '\b', 
		'\x2', '\x2', '}', '~', '\x5', '\x4', '\x3', '\x2', '~', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\x5', '\x4', '\x3', '\x2', '\x80', 
		'\x81', '\a', '\b', '\x2', '\x2', '\x81', '\x82', '\x5', '\b', '\x5', 
		'\x2', '\x82', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x5', 
		'\x4', '\x3', '\x2', '\x84', '\x85', '\a', '\b', '\x2', '\x2', '\x85', 
		'\x86', '\x5', '\x6', '\x4', '\x2', '\x86', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\x5', '\x4', '\x3', '\x2', '\x88', '\x89', '\a', 
		'\b', '\x2', '\x2', '\x89', '\x8A', '\x5', ' ', '\x11', '\x2', '\x8A', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x4', '\x3', 
		'\x2', '\x8C', '\x8D', '\a', '\b', '\x2', '\x2', '\x8D', '\x8E', '\x5', 
		'\"', '\x12', '\x2', '\x8E', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x5', '\x4', '\x3', '\x2', '\x90', '\x91', '\a', '\b', '\x2', 
		'\x2', '\x91', '\x92', '\x5', '$', '\x13', '\x2', '\x92', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x5', '\x4', '\x3', '\x2', '\x94', 
		'\x95', '\a', '\b', '\x2', '\x2', '\x95', '\x96', '\x5', '&', '\x14', 
		'\x2', '\x96', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x5', 
		'\x4', '\x3', '\x2', '\x98', '\x99', '\a', '\b', '\x2', '\x2', '\x99', 
		'\x9A', '\x5', '\x1A', '\xE', '\x2', '\x9A', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x5', '\x4', '\x3', '\x2', '\x9C', '\x9D', '\a', 
		'\b', '\x2', '\x2', '\x9D', '\x9E', '\x5', '(', '\x15', '\x2', '\x9E', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\x9F', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x87', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x93', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA7', '\a', '\x37', '\x2', 
		'\x2', '\xA2', '\xA3', '\x5', '\x6', '\x4', '\x2', '\xA3', '\xA4', '\x5', 
		'\x14', '\v', '\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x38', '\x2', 
		'\x2', '\xAB', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', 
		'\x34', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x1E', '\x10', '\x2', '\xAE', 
		'\xAF', '\x5', '\xE', '\b', '\x2', '\xAF', '\xB0', '\a', '\x34', '\x2', 
		'\x2', '\xB0', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xBF', '\b', 
		'\x10', '\x1', '\x2', '\xB2', '\xB3', '\f', '\x6', '\x2', '\x2', '\xB3', 
		'\xB4', '\a', '\x35', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x35', '\x2', 
		'\x2', '\xB5', '\xBE', '\a', '\x36', '\x2', '\x2', '\xB6', '\xB7', '\f', 
		'\x5', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x35', '\x2', '\x2', '\xB8', 
		'\xBE', '\a', '\x36', '\x2', '\x2', '\xB9', '\xBA', '\f', '\x4', '\x2', 
		'\x2', '\xBA', '\xBB', '\x5', '\x4', '\x3', '\x2', '\xBB', '\xBC', '\a', 
		'\x36', '\x2', '\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC6', '\a', 
		'\x34', '\x2', '\x2', '\xC3', '\xC5', '\v', '\x2', '\x2', '\x2', '\xC4', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x34', '\x2', 
		'\x2', '\xCA', '!', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\a', 
		'\t', '\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xD0', '\a', '/', '\x2', '\x2', '\xCF', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '#', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD5', '\a', 
		'\t', '\x2', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD8', '\a', '/', '\x2', '\x2', '\xD7', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDE', '\a', '\x35', '\x2', '\x2', '\xDD', 
		'\xDF', '\a', '/', '\x2', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\t', '\x4', '\x2', '\x2', 
		'\xE3', '\'', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\t', '\x5', 
		'\x2', '\x2', '\xE5', ')', '\x3', '\x2', '\x2', '\x2', '\x15', '-', '\x33', 
		'<', '\x43', 'P', '[', 'g', 'p', 'y', '\x9F', '\xA7', '\xBD', '\xBF', 
		'\xC6', '\xCC', '\xD1', '\xD4', '\xD9', '\xE0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
